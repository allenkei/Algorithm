#####################################
## Function 1: Lasso solution path ##
#####################################

myLasso <- function(X, Y, lambda_all){
  n = nrow(X)
  X = cbind(rep(1, n), X)
  p = ncol(X)
  S = 10
  len = length(lambda_all)
  beta_all = matrix(rep(0,len*(p)), nrow = p)

  R = Y
  beta = rep(0,p)
  SS = rep(0, p)
  for (j in 1:p)
    SS[j] = sum(X[,j]^2)
  for (l in 1:len) {
    lambda = lambda_all[l]
    for (t in 1:S){
      for (k in 1:p) {
        db = sum(R * X[,k]) / SS[k]
        b = beta[k] + db
        b = sign(b) * max(0, abs(b)-lambda/SS[k])
        db = b - beta[k]
        R = R - X[,k] * db
        beta[k] = b
      }
    }
    beta_all[,l] = beta
  }
  return(beta_all)
}


########################################
## Function 2: Lasso Epsilon Boosting ##
########################################

myLasso_boosting <- function(X, Y){
  n = nrow(X)
  X = cbind(rep(1, n), X)
  p = ncol(X)
  T = 5000
  epsilon = .01
  beta = rep(0,p)
  beta_all = matrix(rep(0, p*T), nrow = p)
  R <- Y - X%*%beta
  for (t in 1:T){
    r <- rep(0,p)
    for(i in 1:p){r[i] <- sum(R * X[,i])}
    index <- which.max(abs(r))
    beta[index] <- beta[index] + epsilon*sign(sum(R * X[,index]))
    R <- R - (epsilon*sign(sum(R * X[,index])))*X[,index]
    beta_all[,t] <- beta
  }
  return(beta_all)
}

test <- function() {
  set.seed(10086)
  n = 50
  p = 200
  lambda_all = (100:1) * 10
  X = matrix(rnorm(n*p), nrow = n)
  beta_true = matrix(rep(0,p), nrow = p)
  beta_true[1:5] = 1:5
  Y = 1 + X %*% beta_true + rnorm(n)
  #beta_all <- myLasso(X, Y, lambda_all)
  beta_all <- myLasso_boosting(X,Y)

  X = cbind(rep(1, n), X);
  Y_hat = X %*% beta_all;
  estimation_error = rep(0,100)
  for (i in 1:5000)
    estimation_error[i] = sum((Y-Y_hat[,i])^2)
  matplot(t(matrix(rep(1,p+1),nrow=1)%*%abs(beta_all)), t(beta_all), type = 'l')

  matplot(estimation_error,type = 'l')
}

test()
