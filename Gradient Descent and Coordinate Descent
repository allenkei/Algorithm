########################################################################
# Gradient Descent for Negative Log Likelihood in Logistics Regression #
########################################################################

library(ISLR)
data(Smarket)

model <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket, family = binomial)

# sigmoid = 1 / (1 + exp(-z))
# where z = X %*% w

# p(y=1|w,X) = sigmoid(X %*% w)
# p(y=0|w,X) = 1- sigmoid(X %*% w)
# p(y|w,X) = [sigmoid(X %*% w)^y] * [(1-sigmoid(X %*% w))^(1-y)]

# likelihood = multiply i to n: [sigmoid(X %*% w)^y_i] * [(1-sigmoid(X %*% w))^(1-y_i)]
# negative log likelihood = - sum i to n: y_i * log(sigmoid(X %*% w)) + (1-y_i) * log(1-sigmoid(X %*% w))

# denote sigmoid(X %*% w) as H
# then negative log likelihood = - sum i to n: y_i * log(H) + (1-y_i) * log(1-H)
# d -logL/dw = -sum i to n: y_i * H'/H - (1-y_i) * H'/(1-H)
# where H' = H * (1-H) * x_i
# gradient = -sum i to n: y_i * (1-H) * x_i - (1-y_i) * H * x_i
# gradient = sum i to n: (H - y_i) * x_i

X <- as.matrix(Smarket[,2:7])
X <- cbind(rep(1,1250),X)
Y <- as.numeric(Smarket[,9])
Y[Y==1] <- 0;Y[Y==2] <- 1

sigmoid <- function(z) 1/(1+exp(-z))

w0 <- runif(7)
w1 <- w0 - 0.001 * t(X) %*% (sigmoid(X %*% w0) - Y)

while(sum(w1 == w0) != 7){
  w0 <- w1
  w1 <- w0 - 0.001 * t(X) %*% (sigmoid(X %*% w0) - Y)
}

#Comparison
model$coefficients
w1

#######################################################################################
# Closed-Form Solution, Gradient Descent and Coordinate Descent for Linear Regression #
#######################################################################################

library(ISLR)
x=model.matrix(Salary~.,Hitters)[,-1]
y=na.omit(Hitters$Salary)
x <- scale(x)
y <- scale(y)

#(1) R package
model <- lm(y~x-1)
model$coefficients

#(2) Closed form solution
# RSS = (Y - X %*% beta)(Y - X %*% beta)
# RSS = t(Y) %*% Y - 2 * t(Y) %*% X %*% beta + t(beta) %*% t(X) %*% X %*% beta
# dRSS/dbeta = -2 * t(X) %*% Y + 2 * t(X) %*% X %*% beta
# set dRSS/dbeta = 0 
c(solve(t(x) %*% x) %*% t(x) %*% y)

#(3) Gradient Descent
# RSS = (Y - X %*% beta)(Y - X %*% beta)
# RSS = t(Y) %*% Y - 2 * t(Y) %*% X %*% beta + t(beta) %*% t(X) %*% X %*% beta
# dRSS/dbeta = -2 * t(X) %*% Y + 2 * t(X) %*% X %*% beta
# Gradient = -2 * t(X) %*% (Y - X %*% beta)
# w(t+1) = w(t) - alpha * gradient 
w0 <- runif(dim(x)[2])
w1 <- w0 + 2 * 0.0005 * t(x) %*% (y - x %*% w0)

while(sum(w1==w0) != 19){
  w0 <- w1
  w1 <- w0 + 2 * 0.0005 * t(x) %*% (y - x %*% w0)
}
c(w1)

#(4) Coordinate Descent
# RSS = sum_i (yi - sum_j (wj * xij))^2
# dRSS/dwj = 2 * sum_i (yi - sum_j (wj * xij)) * (-xij)
# dRSS/dwj = -2 * sum_i (xij) * (yi - sum_k_not_j (wk * xik) - wj * xij)
# dRSS/dwj = -2 * sum_i (xij) * (yi - sum_k_not_j (wk * xik)) +  2 *wj * sum_i xij^2
# set dRSS/dwj = 0
# wj = [sum_i (xij) * (yi - sum_k_not_j (wk * xik))] / [sum_i xij^2]

w <- runif(dim(x)[2])
wj <- function(x,y,col_num){
  (t(x[,col_num]) %*% (y - x[,-col_num] %*% w[-col_num]))  / sum(x[,col_num]^2)
}

w0 <- w
for(i in 1:19){w[i] <- wj(x,y,i)} 

while(sum((w-w0)^2) > 0.01){
  for(i in 1:19){w[i] <- wj(x,y,i)} 
}
w

